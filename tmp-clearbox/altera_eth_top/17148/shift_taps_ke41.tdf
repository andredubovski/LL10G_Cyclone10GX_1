--altshift_taps CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone 10 GX" NUMBER_OF_TAPS=1 RAM_BLOCK_TYPE="AUTO" TAP_DISTANCE=7 WIDTH=6 aclr clken clock shiftin shiftout taps ACF_BLOCK_RAM_AND_MLAB_EQUIVALENT_PAUSED_READ_CAPABILITIES="CARE" CARRY_CHAIN="MANUAL" CYCLONEII_M4K_COMPATIBILITY="ON" INTENDED_DEVICE_FAMILY="Arria V" LOW_POWER_MODE="AUTO" lpm_hint="RAM_BLOCK_TYPE=AUTO"
--VERSION_BEGIN 18.1 cbx_altdpram 2018:08:19:08:04:10:SJ cbx_altera_syncram 2018:08:19:08:04:10:SJ cbx_altera_syncram_nd_impl 2018:08:19:08:04:10:SJ cbx_altshift_taps 2018:08:19:08:04:10:SJ cbx_altshift_taps_counter 2018:08:19:08:04:10:SJ cbx_altsyncram 2018:08:19:08:04:10:SJ cbx_lpm_add_sub 2018:08:19:08:04:10:SJ cbx_lpm_compare 2018:08:19:08:04:10:SJ cbx_lpm_counter 2018:08:19:08:04:10:SJ cbx_lpm_decode 2018:08:19:08:04:10:SJ cbx_lpm_mux 2018:08:19:08:04:10:SJ cbx_mgl 2018:08:19:08:04:50:SJ cbx_nadder 2018:08:19:08:04:10:SJ cbx_stratix 2018:08:19:08:04:10:SJ cbx_stratixii 2018:08:19:08:04:10:SJ cbx_stratixiii 2018:08:19:08:04:10:SJ cbx_stratixv 2018:08:19:08:04:10:SJ cbx_util_mgl 2018:08:19:08:04:10:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.


FUNCTION altsyncram_mch1 (aclr0, address_a[2..0], address_b[2..0], clock0, clocken0, data_a[5..0], wren_a)
RETURNS ( q_b[5..0]);
FUNCTION cntr_5pf (clk_en, clock)
RETURNS ( q[2..0]);
FUNCTION cntr_r8h (aset, clk_en, clock, cnt_en)
RETURNS ( cout);

--synthesis_resources = M20K 1 reg 1 
SUBDESIGN shift_taps_ke41
( 
	aclr	:	input;
	clken	:	input;
	clock	:	input;
	shiftin[5..0]	:	input;
	shiftout[5..0]	:	output;
	taps[5..0]	:	output;
) 
VARIABLE 
	altsyncram2 : altsyncram_mch1;
	dffe4 : dffe;
	cntr1 : cntr_5pf;
	cntr3 : cntr_r8h;

BEGIN 
	altsyncram2.aclr0 = dffe4.q;
	altsyncram2.address_a[] = cntr1.q[];
	altsyncram2.address_b[] = cntr1.q[];
	altsyncram2.clock0 = clock;
	altsyncram2.clocken0 = clken;
	altsyncram2.data_a[] = ( shiftin[]);
	altsyncram2.wren_a = B"1";
	dffe4.clk = clock;
	dffe4.d = (! cntr3.cout);
	dffe4.ena = clken;
	dffe4.prn = (! aclr);
	cntr1.clk_en = clken;
	cntr1.clock = clock;
	cntr3.aset = aclr;
	cntr3.clk_en = clken;
	cntr3.clock = clock;
	cntr3.cnt_en = (! cntr3.cout);
	shiftout[5..0] = altsyncram2.q_b[5..0];
	taps[] = altsyncram2.q_b[];
END;
--VALID FILE
